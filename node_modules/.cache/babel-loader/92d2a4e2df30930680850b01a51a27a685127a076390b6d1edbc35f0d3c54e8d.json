{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\Desktop\\\\mini-page-builder\\\\src\\\\Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Modal from './Modal';\nimport './Canvas.css'; // CSS file for specific canvas styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Canvas() {\n  _s();\n  const [elements, setElements] = useState([]);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [tempElement, setTempElement] = useState(null); // Temporarily store the element being configured\n  const [draggingElement, setDraggingElement] = useState(null); // Track the element being dragged\n\n  const handleDrop = event => {\n    event.preventDefault();\n    const elementType = event.dataTransfer.getData('text/plain');\n    const {\n      clientX,\n      clientY\n    } = event;\n\n    // If an element is being moved, update its position\n    if (draggingElement) {\n      const updatedElements = elements.map(el => el.id === draggingElement.id ? {\n        ...el,\n        x: clientX,\n        y: clientY\n      } : el);\n      setElements(updatedElements);\n      setDraggingElement(null); // Clear the dragging element\n    } else {\n      // New element is being dropped\n      const newElement = {\n        id: Date.now(),\n        // Unique ID for new elements\n        type: elementType,\n        x: clientX,\n        y: clientY,\n        text: 'Label',\n        // Default text\n        fontSize: '16px',\n        // Default font size\n        fontWeight: 'normal' // Default font weight\n      };\n      setTempElement(newElement); // Store temporarily\n      setModalOpen(true); // Open modal for configuration\n    }\n  };\n  const handleDragOver = event => {\n    event.preventDefault();\n    if (draggingElement) {\n      const {\n        clientX,\n        clientY\n      } = event;\n      const updatedElements = elements.map(el => el.id === draggingElement.id ? {\n        ...el,\n        x: clientX,\n        y: clientY,\n        isDragging: true\n      } : el);\n      setElements(updatedElements);\n    }\n  };\n  const handleSaveChanges = config => {\n    const updatedElement = {\n      ...tempElement,\n      ...config\n    };\n    setElements([...elements, updatedElement]); // Add or update element\n    setModalOpen(false); // Close modal\n    setTempElement(null); // Clear temporary element\n  };\n  const handleDeleteElement = id => {\n    const updatedElements = elements.filter(el => el.id !== id);\n    setElements(updatedElements);\n  };\n  const handleKeyDown = event => {\n    if (event.key === 'Delete' && draggingElement) {\n      handleDeleteElement(draggingElement.id);\n      setDraggingElement(null);\n    }\n  };\n  const handleDragStart = (el, event) => {\n    event.dataTransfer.setData('text/plain', 'Label');\n    setDraggingElement(el); // Track the element being dragged\n  };\n  const handleDragEnd = event => {\n    const {\n      clientX,\n      clientY\n    } = event;\n    const updatedElements = elements.map(el => el.id === draggingElement.id ? {\n      ...el,\n      x: clientX,\n      y: clientY,\n      isDragging: false\n    } : el);\n    setElements(updatedElements);\n    setDraggingElement(null); // Clear the dragging element after dragging\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"canvas\",\n    onDragOver: handleDragOver,\n    onDrop: handleDrop,\n    onKeyDown: handleKeyDown,\n    tabIndex: \"0\",\n    children: [elements.map((el, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"element\",\n      style: {\n        left: el.x,\n        top: el.y,\n        position: el.isDragging ? 'absolute' : 'relative',\n        opacity: el.isDragging ? 0.5 : 1\n      },\n      draggable: true,\n      onDragStart: event => handleDragStart(el, event),\n      onDragEnd: handleDragEnd,\n      children: el.text\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this)), modalOpen && /*#__PURE__*/_jsxDEV(Modal, {\n      element: tempElement,\n      onSaveChanges: handleSaveChanges,\n      onClose: () => setModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_s(Canvas, \"VQc82ua7bQLehjMlaPCJQaFKUWg=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useState","Modal","jsxDEV","_jsxDEV","Canvas","_s","elements","setElements","modalOpen","setModalOpen","tempElement","setTempElement","draggingElement","setDraggingElement","handleDrop","event","preventDefault","elementType","dataTransfer","getData","clientX","clientY","updatedElements","map","el","id","x","y","newElement","Date","now","type","text","fontSize","fontWeight","handleDragOver","isDragging","handleSaveChanges","config","updatedElement","handleDeleteElement","filter","handleKeyDown","key","handleDragStart","setData","handleDragEnd","className","onDragOver","onDrop","onKeyDown","tabIndex","children","index","style","left","top","position","opacity","draggable","onDragStart","onDragEnd","fileName","_jsxFileName","lineNumber","columnNumber","element","onSaveChanges","onClose","_c","$RefreshReg$"],"sources":["C:/Users/Asus/Desktop/mini-page-builder/src/Canvas.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Modal from './Modal';\nimport './Canvas.css'; // CSS file for specific canvas styles\n\nfunction Canvas() {\n  const [elements, setElements] = useState([]);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [tempElement, setTempElement] = useState(null); // Temporarily store the element being configured\n  const [draggingElement, setDraggingElement] = useState(null); // Track the element being dragged\n\n  const handleDrop = (event) => {\n    event.preventDefault();\n    const elementType = event.dataTransfer.getData('text/plain');\n    const { clientX, clientY } = event;\n\n    // If an element is being moved, update its position\n    if (draggingElement) {\n      const updatedElements = elements.map(el =>\n        el.id === draggingElement.id ? { ...el, x: clientX, y: clientY } : el\n      );\n      setElements(updatedElements);\n      setDraggingElement(null); // Clear the dragging element\n    } else {\n      // New element is being dropped\n      const newElement = {\n        id: Date.now(), // Unique ID for new elements\n        type: elementType,\n        x: clientX,\n        y: clientY,\n        text: 'Label', // Default text\n        fontSize: '16px', // Default font size\n        fontWeight: 'normal' // Default font weight\n      };\n\n      setTempElement(newElement); // Store temporarily\n      setModalOpen(true); // Open modal for configuration\n    }\n  };\n\n  const handleDragOver = (event) => {\n    event.preventDefault();\n    if (draggingElement) {\n      const { clientX, clientY } = event;\n      const updatedElements = elements.map(el =>\n        el.id === draggingElement.id ? { ...el, x: clientX, y: clientY, isDragging: true } : el\n      );\n      setElements(updatedElements);\n    }\n  };\n\n  const handleSaveChanges = (config) => {\n    const updatedElement = {\n      ...tempElement,\n      ...config\n    };\n\n    setElements([...elements, updatedElement]); // Add or update element\n    setModalOpen(false); // Close modal\n    setTempElement(null); // Clear temporary element\n  };\n\n  const handleDeleteElement = (id) => {\n    const updatedElements = elements.filter(el => el.id !== id);\n    setElements(updatedElements);\n  };\n\n  const handleKeyDown = (event) => {\n    if (event.key === 'Delete' && draggingElement) {\n      handleDeleteElement(draggingElement.id);\n      setDraggingElement(null);\n    }\n  };\n\n  const handleDragStart = (el, event) => {\n    event.dataTransfer.setData('text/plain', 'Label');\n    setDraggingElement(el); // Track the element being dragged\n  };\n\n  const handleDragEnd = (event) => {\n    const { clientX, clientY } = event;\n    const updatedElements = elements.map(el =>\n      el.id === draggingElement.id ? { ...el, x: clientX, y: clientY, isDragging: false } : el\n    );\n    setElements(updatedElements);\n    setDraggingElement(null); // Clear the dragging element after dragging\n  };\n\n  return (\n    <div\n      className='canvas'\n      onDragOver={handleDragOver}\n      onDrop={handleDrop}\n      onKeyDown={handleKeyDown}\n      tabIndex=\"0\"\n    >\n      {/* Render dropped elements */}\n      {elements.map((el, index) => (\n        <div\n          key={index}\n          className='element'\n          style={{ \n            left: el.x, \n            top: el.y, \n            position: el.isDragging ? 'absolute' : 'relative',\n            opacity: el.isDragging ? 0.5 : 1 \n          }}\n          draggable={true}\n          onDragStart={(event) => handleDragStart(el, event)}\n          onDragEnd={handleDragEnd}\n        >\n          {el.text}\n        </div>\n      ))}\n\n      {/* Modal for configuration */}\n      {modalOpen && (\n        <Modal\n          element={tempElement}\n          onSaveChanges={handleSaveChanges}\n          onClose={() => setModalOpen(false)}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Canvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}