{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\Desktop\\\\mini-page-builder\\\\src\\\\Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Modal from './Modal';\nimport './Canvas.css'; // CSS file for specific canvas styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Canvas() {\n  _s();\n  const [elements, setElements] = useState([]);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [tempElement, setTempElement] = useState(null); // Temporarily store the element being configured\n  const [selectedElement, setSelectedElement] = useState(null); // Track the selected element\n  const [draggingElement, setDraggingElement] = useState(null); // Track the element being dragged\n\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if (selectedElement) {\n        if (event.key === 'Enter') {\n          setTempElement(selectedElement);\n          setModalOpen(true);\n        } else if (event.key === 'Delete') {\n          handleDeleteElement(selectedElement.id);\n        }\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [selectedElement]);\n  const handleDrop = event => {\n    event.preventDefault();\n    const elementType = event.dataTransfer.getData('text/plain');\n    const {\n      clientX,\n      clientY\n    } = event;\n    if (draggingElement) {\n      const updatedElements = elements.map(el => el.id === draggingElement.id ? {\n        ...el,\n        x: clientX,\n        y: clientY,\n        isDragging: false\n      } : el);\n      setElements(updatedElements);\n      setDraggingElement(null); // Clear the dragging element\n    } else {\n      const newElement = {\n        id: Date.now(),\n        // Unique ID for new elements\n        type: elementType,\n        x: clientX,\n        y: clientY,\n        text: 'Label',\n        // Default text\n        fontSize: '16px',\n        // Default font size\n        fontWeight: 'normal' // Default font weight\n      };\n      setTempElement(newElement); // Store temporarily\n      setModalOpen(true); // Open modal for configuration\n    }\n  };\n  const handleDragOver = event => {\n    event.preventDefault();\n    if (draggingElement) {\n      const {\n        clientX,\n        clientY\n      } = event;\n      const updatedElements = elements.map(el => el.id === draggingElement.id ? {\n        ...el,\n        x: clientX,\n        y: clientY,\n        isDragging: true\n      } : el);\n      setElements(updatedElements);\n    }\n  };\n  const handleSaveChanges = config => {\n    const updatedElements = elements.map(el => el.id === tempElement.id ? {\n      ...el,\n      ...config\n    } : el);\n\n    // Calculate new dimensions after applying configuration changes\n    const updatedElement = {\n      ...tempElement,\n      ...config\n    };\n    const canvasRect = document.querySelector('.canvas').getBoundingClientRect();\n    const elementRect = {\n      width: calculateElementWidth(updatedElement),\n      height: calculateElementHeight(updatedElement)\n    };\n\n    // Ensure element stays within canvas boundaries\n    updatedElement.x = Math.min(Math.max(updatedElement.x, 0), canvasRect.width - elementRect.width);\n    updatedElement.y = Math.min(Math.max(updatedElement.y, 0), canvasRect.height - elementRect.height);\n    if (!elements.some(el => el.id === tempElement.id)) {\n      setElements([...elements, updatedElement]);\n    } else {\n      setElements(updatedElements);\n    }\n    setModalOpen(false); // Close modal\n    setTempElement(null); // Clear temporary element\n  };\n  const calculateElementWidth = element => {\n    // Use the actual width of the element content instead of a fixed value\n    const div = document.createElement('div');\n    div.style.fontSize = element.fontSize;\n    div.style.fontWeight = element.fontWeight;\n    div.style.display = 'inline-block';\n    div.textContent = element.text;\n    document.body.appendChild(div);\n    const width = div.clientWidth;\n    document.body.removeChild(div);\n    return width;\n  };\n  const calculateElementHeight = element => {\n    // Use the actual height of the element content instead of a fixed value\n    const div = document.createElement('div');\n    div.style.fontSize = element.fontSize;\n    div.style.fontWeight = element.fontWeight;\n    div.style.display = 'inline-block';\n    div.textContent = element.text;\n    document.body.appendChild(div);\n    const height = div.clientHeight;\n    document.body.removeChild(div);\n    return height;\n  };\n  const handleDeleteElement = id => {\n    const updatedElements = elements.filter(el => el.id !== id);\n    setElements(updatedElements);\n    setSelectedElement(null); // Clear the selected element\n  };\n  const handleElementClick = (el, event) => {\n    event.stopPropagation(); // Prevent triggering canvas click\n    setSelectedElement(el); // Set the element as selected\n  };\n  const handleCanvasClick = () => {\n    setSelectedElement(null); // Clear selection when clicking on canvas\n  };\n  const handleDragStart = (el, event) => {\n    event.dataTransfer.setData('text/plain', 'Label');\n    setDraggingElement(el); // Track the element being dragged\n  };\n  const handleDragEnd = event => {\n    if (draggingElement) {\n      const {\n        clientX,\n        clientY\n      } = event;\n      const updatedElements = elements.map(el => el.id === draggingElement.id ? {\n        ...el,\n        x: clientX,\n        y: clientY,\n        isDragging: false\n      } : el);\n      setElements(updatedElements);\n      setDraggingElement(null); // Clear the dragging element after dragging\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"canvas\",\n    onDragOver: handleDragOver,\n    onDrop: handleDrop,\n    onClick: handleCanvasClick,\n    tabIndex: \"0\",\n    children: [elements.map((el, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `element ${(selectedElement === null || selectedElement === void 0 ? void 0 : selectedElement.id) === el.id || (draggingElement === null || draggingElement === void 0 ? void 0 : draggingElement.id) === el.id ? 'selected' : ''}`,\n      style: {\n        left: el.x,\n        top: el.y,\n        position: 'absolute',\n        cursor: 'grab',\n        opacity: el.isDragging ? 0 : 1,\n        fontSize: el.fontSize,\n        fontWeight: el.fontWeight\n      },\n      draggable: true,\n      onClick: event => handleElementClick(el, event),\n      onDragStart: event => handleDragStart(el, event),\n      onDragEnd: handleDragEnd,\n      children: el.text\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }, this)), modalOpen && /*#__PURE__*/_jsxDEV(Modal, {\n      element: tempElement,\n      onSaveChanges: handleSaveChanges,\n      onClose: () => setModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n}\n_s(Canvas, \"QJK4+5IZqXkKnD5z+bM1yDjk+wg=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useState","useEffect","Modal","jsxDEV","_jsxDEV","Canvas","_s","elements","setElements","modalOpen","setModalOpen","tempElement","setTempElement","selectedElement","setSelectedElement","draggingElement","setDraggingElement","handleKeyDown","event","key","handleDeleteElement","id","window","addEventListener","removeEventListener","handleDrop","preventDefault","elementType","dataTransfer","getData","clientX","clientY","updatedElements","map","el","x","y","isDragging","newElement","Date","now","type","text","fontSize","fontWeight","handleDragOver","handleSaveChanges","config","updatedElement","canvasRect","document","querySelector","getBoundingClientRect","elementRect","width","calculateElementWidth","height","calculateElementHeight","Math","min","max","some","element","div","createElement","style","display","textContent","body","appendChild","clientWidth","removeChild","clientHeight","filter","handleElementClick","stopPropagation","handleCanvasClick","handleDragStart","setData","handleDragEnd","className","onDragOver","onDrop","onClick","tabIndex","children","index","left","top","position","cursor","opacity","draggable","onDragStart","onDragEnd","fileName","_jsxFileName","lineNumber","columnNumber","onSaveChanges","onClose","_c","$RefreshReg$"],"sources":["C:/Users/Asus/Desktop/mini-page-builder/src/Canvas.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Modal from './Modal';\nimport './Canvas.css'; // CSS file for specific canvas styles\n\nfunction Canvas() {\n  const [elements, setElements] = useState([]);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [tempElement, setTempElement] = useState(null); // Temporarily store the element being configured\n  const [selectedElement, setSelectedElement] = useState(null); // Track the selected element\n  const [draggingElement, setDraggingElement] = useState(null); // Track the element being dragged\n\n  useEffect(() => {\n    const handleKeyDown = (event) => {\n      if (selectedElement) {\n        if (event.key === 'Enter') {\n          setTempElement(selectedElement);\n          setModalOpen(true);\n        } else if (event.key === 'Delete') {\n          handleDeleteElement(selectedElement.id);\n        }\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [selectedElement]);\n\n  const handleDrop = (event) => {\n    event.preventDefault();\n    const elementType = event.dataTransfer.getData('text/plain');\n    const { clientX, clientY } = event;\n\n    if (draggingElement) {\n      const updatedElements = elements.map(el =>\n        el.id === draggingElement.id ? { ...el, x: clientX, y: clientY, isDragging: false } : el\n      );\n      setElements(updatedElements);\n      setDraggingElement(null); // Clear the dragging element\n    } else {\n      const newElement = {\n        id: Date.now(), // Unique ID for new elements\n        type: elementType,\n        x: clientX,\n        y: clientY,\n        text: 'Label', // Default text\n        fontSize: '16px', // Default font size\n        fontWeight: 'normal' // Default font weight\n      };\n\n      setTempElement(newElement); // Store temporarily\n      setModalOpen(true); // Open modal for configuration\n    }\n  };\n\n  const handleDragOver = (event) => {\n    event.preventDefault();\n    if (draggingElement) {\n      const { clientX, clientY } = event;\n      const updatedElements = elements.map(el =>\n        el.id === draggingElement.id ? { ...el, x: clientX, y: clientY, isDragging: true } : el\n      );\n      setElements(updatedElements);\n    }\n  };\n\n  const handleSaveChanges = (config) => {\n    const updatedElements = elements.map(el =>\n      el.id === tempElement.id ? { ...el, ...config } : el\n    );\n\n    // Calculate new dimensions after applying configuration changes\n    const updatedElement = {\n      ...tempElement,\n      ...config,\n    };\n\n    const canvasRect = document.querySelector('.canvas').getBoundingClientRect();\n    const elementRect = {\n      width: calculateElementWidth(updatedElement),\n      height: calculateElementHeight(updatedElement),\n    };\n\n    // Ensure element stays within canvas boundaries\n    updatedElement.x = Math.min(Math.max(updatedElement.x, 0), canvasRect.width - elementRect.width);\n    updatedElement.y = Math.min(Math.max(updatedElement.y, 0), canvasRect.height - elementRect.height);\n\n    if (!elements.some(el => el.id === tempElement.id)) {\n      setElements([...elements, updatedElement]);\n    } else {\n      setElements(updatedElements);\n    }\n\n    setModalOpen(false); // Close modal\n    setTempElement(null); // Clear temporary element\n  };\n\n  const calculateElementWidth = (element) => {\n    // Use the actual width of the element content instead of a fixed value\n    const div = document.createElement('div');\n    div.style.fontSize = element.fontSize;\n    div.style.fontWeight = element.fontWeight;\n    div.style.display = 'inline-block';\n    div.textContent = element.text;\n    document.body.appendChild(div);\n    const width = div.clientWidth;\n    document.body.removeChild(div);\n    return width;\n  };\n\n  const calculateElementHeight = (element) => {\n    // Use the actual height of the element content instead of a fixed value\n    const div = document.createElement('div');\n    div.style.fontSize = element.fontSize;\n    div.style.fontWeight = element.fontWeight;\n    div.style.display = 'inline-block';\n    div.textContent = element.text;\n    document.body.appendChild(div);\n    const height = div.clientHeight;\n    document.body.removeChild(div);\n    return height;\n  };\n\n  const handleDeleteElement = (id) => {\n    const updatedElements = elements.filter(el => el.id !== id);\n    setElements(updatedElements);\n    setSelectedElement(null); // Clear the selected element\n  };\n\n  const handleElementClick = (el, event) => {\n    event.stopPropagation(); // Prevent triggering canvas click\n    setSelectedElement(el); // Set the element as selected\n  };\n\n  const handleCanvasClick = () => {\n    setSelectedElement(null); // Clear selection when clicking on canvas\n  };\n\n  const handleDragStart = (el, event) => {\n    event.dataTransfer.setData('text/plain', 'Label');\n    setDraggingElement(el); // Track the element being dragged\n  };\n\n  const handleDragEnd = (event) => {\n    if (draggingElement) {\n      const { clientX, clientY } = event;\n      const updatedElements = elements.map(el =>\n        el.id === draggingElement.id ? { ...el, x: clientX, y: clientY, isDragging: false } : el\n      );\n      setElements(updatedElements);\n      setDraggingElement(null); // Clear the dragging element after dragging\n    }\n  };\n\n  return (\n    <div\n      className='canvas'\n      onDragOver={handleDragOver}\n      onDrop={handleDrop}\n      onClick={handleCanvasClick}\n      tabIndex=\"0\"\n    >\n      {elements.map((el, index) => (\n        <div\n          key={index}\n          className={`element ${selectedElement?.id === el.id || draggingElement?.id === el.id ? 'selected' : ''}`}\n          style={{ \n            left: el.x, \n            top: el.y, \n            position: 'absolute',\n            cursor: 'grab',\n            opacity: el.isDragging ? 0 : 1,\n            fontSize: el.fontSize,\n            fontWeight: el.fontWeight\n          }}\n          draggable={true}\n          onClick={(event) => handleElementClick(el, event)}\n          onDragStart={(event) => handleDragStart(el, event)}\n          onDragEnd={handleDragEnd}\n        >\n          {el.text}\n        </div>\n      ))}\n\n      {modalOpen && (\n        <Modal\n          element={tempElement}\n          onSaveChanges={handleSaveChanges}\n          onClose={() => setModalOpen(false)}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Canvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}