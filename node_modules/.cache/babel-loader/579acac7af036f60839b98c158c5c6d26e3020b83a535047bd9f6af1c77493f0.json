{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\Desktop\\\\mini-page-builder\\\\src\\\\Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Modal from './Modal';\nimport './Canvas.css'; // CSS file for specific canvas styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Canvas() {\n  _s();\n  const [elements, setElements] = useState([]);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [tempElement, setTempElement] = useState(null); // Temporarily store the element being configured\n  const [selectedElement, setSelectedElement] = useState(null); // Track the selected element\n  const [draggingElement, setDraggingElement] = useState(null); // Track the element being dragged\n\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if (selectedElement) {\n        if (event.key === 'Enter') {\n          setTempElement(selectedElement);\n          setModalOpen(true);\n        } else if (event.key === 'Delete') {\n          handleDeleteElement(selectedElement.id);\n        }\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [selectedElement]);\n  const handleDrop = event => {\n    event.preventDefault();\n    const elementType = event.dataTransfer.getData('text/plain');\n    const {\n      clientX,\n      clientY\n    } = event;\n\n    // If an element is being moved, update its position\n    if (draggingElement) {\n      const updatedElements = elements.map(el => el.id === draggingElement.id ? {\n        ...el,\n        x: clientX,\n        y: clientY\n      } : el);\n      setElements(updatedElements);\n      setDraggingElement(null); // Clear the dragging element\n    } else {\n      // New element is being dropped\n      const newElement = {\n        id: Date.now(),\n        // Unique ID for new elements\n        type: elementType,\n        x: clientX,\n        y: clientY,\n        text: 'Label',\n        // Default text\n        fontSize: '16px',\n        // Default font size\n        fontWeight: 'normal' // Default font weight\n      };\n      setTempElement(newElement); // Store temporarily\n      setModalOpen(true); // Open modal for configuration\n    }\n  };\n  const handleDragOver = event => {\n    event.preventDefault();\n    if (draggingElement) {\n      const {\n        clientX,\n        clientY\n      } = event;\n      const updatedElements = elements.map(el => el.id === draggingElement.id ? {\n        ...el,\n        x: clientX,\n        y: clientY,\n        isDragging: true\n      } : el);\n      setElements(updatedElements);\n    }\n  };\n  const handleSaveChanges = config => {\n    const updatedElement = {\n      ...tempElement,\n      ...config\n    };\n    setElements([...elements, updatedElement]); // Add or update element\n    setModalOpen(false); // Close modal\n    setTempElement(null); // Clear temporary element\n  };\n  const handleDeleteElement = id => {\n    const updatedElements = elements.filter(el => el.id !== id);\n    setElements(updatedElements);\n    setSelectedElement(null); // Clear the selected element\n  };\n  const handleElementClick = (el, event) => {\n    event.stopPropagation(); // Prevent triggering canvas click\n    setSelectedElement(el); // Set the element as selected\n  };\n  const handleCanvasClick = () => {\n    setSelectedElement(null); // Clear selection when clicking on canvas\n  };\n  const handleDragStart = (el, event) => {\n    event.dataTransfer.setData('text/plain', 'Label');\n    setDraggingElement(el); // Track the element being dragged\n  };\n  const handleDragEnd = event => {\n    if (draggingElement) {\n      const {\n        clientX,\n        clientY\n      } = event;\n      const updatedElements = elements.map(el => el.id === draggingElement.id ? {\n        ...el,\n        x: clientX,\n        y: clientY,\n        isDragging: false\n      } : el);\n      setElements(updatedElements);\n      setDraggingElement(null); // Clear the dragging element after dragging\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"canvas\",\n    onDragOver: handleDragOver,\n    onDrop: handleDrop,\n    onClick: handleCanvasClick,\n    tabIndex: \"0\",\n    children: [elements.map((el, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `element ${(selectedElement === null || selectedElement === void 0 ? void 0 : selectedElement.id) === el.id ? 'selected' : ''}`,\n      style: {\n        left: el.x,\n        top: el.y,\n        position: 'absolute',\n        cursor: 'grab',\n        opacity: el.isDragging ? 0.5 : 1\n      },\n      draggable: true,\n      onClick: event => handleElementClick(el, event),\n      onDragStart: event => handleDragStart(el, event),\n      onDragEnd: handleDragEnd,\n      children: el.text\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this)), modalOpen && /*#__PURE__*/_jsxDEV(Modal, {\n      element: tempElement,\n      onSaveChanges: handleSaveChanges,\n      onClose: () => setModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n}\n_s(Canvas, \"QJK4+5IZqXkKnD5z+bM1yDjk+wg=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useState","useEffect","Modal","jsxDEV","_jsxDEV","Canvas","_s","elements","setElements","modalOpen","setModalOpen","tempElement","setTempElement","selectedElement","setSelectedElement","draggingElement","setDraggingElement","handleKeyDown","event","key","handleDeleteElement","id","window","addEventListener","removeEventListener","handleDrop","preventDefault","elementType","dataTransfer","getData","clientX","clientY","updatedElements","map","el","x","y","newElement","Date","now","type","text","fontSize","fontWeight","handleDragOver","isDragging","handleSaveChanges","config","updatedElement","filter","handleElementClick","stopPropagation","handleCanvasClick","handleDragStart","setData","handleDragEnd","className","onDragOver","onDrop","onClick","tabIndex","children","index","style","left","top","position","cursor","opacity","draggable","onDragStart","onDragEnd","fileName","_jsxFileName","lineNumber","columnNumber","element","onSaveChanges","onClose","_c","$RefreshReg$"],"sources":["C:/Users/Asus/Desktop/mini-page-builder/src/Canvas.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Modal from './Modal';\nimport './Canvas.css'; // CSS file for specific canvas styles\n\nfunction Canvas() {\n  const [elements, setElements] = useState([]);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [tempElement, setTempElement] = useState(null); // Temporarily store the element being configured\n  const [selectedElement, setSelectedElement] = useState(null); // Track the selected element\n  const [draggingElement, setDraggingElement] = useState(null); // Track the element being dragged\n\n  useEffect(() => {\n    const handleKeyDown = (event) => {\n      if (selectedElement) {\n        if (event.key === 'Enter') {\n          setTempElement(selectedElement);\n          setModalOpen(true);\n        } else if (event.key === 'Delete') {\n          handleDeleteElement(selectedElement.id);\n        }\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [selectedElement]);\n\n  const handleDrop = (event) => {\n    event.preventDefault();\n    const elementType = event.dataTransfer.getData('text/plain');\n    const { clientX, clientY } = event;\n\n    // If an element is being moved, update its position\n    if (draggingElement) {\n      const updatedElements = elements.map(el =>\n        el.id === draggingElement.id ? { ...el, x: clientX, y: clientY } : el\n      );\n      setElements(updatedElements);\n      setDraggingElement(null); // Clear the dragging element\n    } else {\n      // New element is being dropped\n      const newElement = {\n        id: Date.now(), // Unique ID for new elements\n        type: elementType,\n        x: clientX,\n        y: clientY,\n        text: 'Label', // Default text\n        fontSize: '16px', // Default font size\n        fontWeight: 'normal' // Default font weight\n      };\n\n      setTempElement(newElement); // Store temporarily\n      setModalOpen(true); // Open modal for configuration\n    }\n  };\n\n  const handleDragOver = (event) => {\n    event.preventDefault();\n    if (draggingElement) {\n      const { clientX, clientY } = event;\n      const updatedElements = elements.map(el =>\n        el.id === draggingElement.id ? { ...el, x: clientX, y: clientY, isDragging: true } : el\n      );\n      setElements(updatedElements);\n    }\n  };\n\n  const handleSaveChanges = (config) => {\n    const updatedElement = {\n      ...tempElement,\n      ...config\n    };\n\n    setElements([...elements, updatedElement]); // Add or update element\n    setModalOpen(false); // Close modal\n    setTempElement(null); // Clear temporary element\n  };\n\n  const handleDeleteElement = (id) => {\n    const updatedElements = elements.filter(el => el.id !== id);\n    setElements(updatedElements);\n    setSelectedElement(null); // Clear the selected element\n  };\n\n  const handleElementClick = (el, event) => {\n    event.stopPropagation(); // Prevent triggering canvas click\n    setSelectedElement(el); // Set the element as selected\n  };\n\n  const handleCanvasClick = () => {\n    setSelectedElement(null); // Clear selection when clicking on canvas\n  };\n\n  const handleDragStart = (el, event) => {\n    event.dataTransfer.setData('text/plain', 'Label');\n    setDraggingElement(el); // Track the element being dragged\n  };\n\n  const handleDragEnd = (event) => {\n    if (draggingElement) {\n      const { clientX, clientY } = event;\n      const updatedElements = elements.map(el =>\n        el.id === draggingElement.id ? { ...el, x: clientX, y: clientY, isDragging: false } : el\n      );\n      setElements(updatedElements);\n      setDraggingElement(null); // Clear the dragging element after dragging\n    }\n  };\n\n  return (\n    <div\n      className='canvas'\n      onDragOver={handleDragOver}\n      onDrop={handleDrop}\n      onClick={handleCanvasClick}\n      tabIndex=\"0\"\n    >\n      {/* Render dropped elements */}\n      {elements.map((el, index) => (\n        <div\n          key={index}\n          className={`element ${selectedElement?.id === el.id ? 'selected' : ''}`}\n          style={{ \n            left: el.x, \n            top: el.y, \n            position: 'absolute',\n            cursor: 'grab',\n            opacity: el.isDragging ? 0.5 : 1 \n          }}\n          draggable={true}\n          onClick={(event) => handleElementClick(el, event)}\n          onDragStart={(event) => handleDragStart(el, event)}\n          onDragEnd={handleDragEnd}\n        >\n          {el.text}\n        </div>\n      ))}\n\n      {/* Modal for configuration */}\n      {modalOpen && (\n        <Modal\n          element={tempElement}\n          onSaveChanges={handleSaveChanges}\n          onClose={() => setModalOpen(false)}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Canvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}